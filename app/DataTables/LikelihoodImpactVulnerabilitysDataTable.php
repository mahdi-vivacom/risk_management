<?php

namespace App\DataTables;

use App\Models\LikelihoodImpactVulnerability;
use Illuminate\Database\Eloquent\Builder as QueryBuilder;
use Illuminate\Support\Facades\Route;
use Yajra\DataTables\EloquentDataTable;
use Yajra\DataTables\Html\Builder as HtmlBuilder;
use Yajra\DataTables\Html\Button;
use Yajra\DataTables\Html\Column;
use Yajra\DataTables\Services\DataTable;

class LikelihoodImpactVulnerabilitysDataTable extends DataTable
{

    protected $route;
    protected $type;

    public function __construct()
    {
        $routeName = Route::currentRouteName();

        if (strpos($routeName, 'likelihoods') !== false) {
            $this->route = 'likelihoods';
            $this->type = 'Likelihood';
        } elseif (strpos($routeName, 'impacts') !== false) {
            $this->route = 'impacts';
            $this->type = 'Impact';
        } elseif (strpos($routeName, 'vulnerabilities') !== false) {
            $this->route = 'vulnerabilities';
            $this->type = 'Vulnerability';
        }
    }
    /**
     * Build the DataTable class.
     *
     * @param QueryBuilder $query Results from query() method.
     */
    public function dataTable(QueryBuilder $query): EloquentDataTable
    {
        return (new EloquentDataTable($query))
            ->addColumn('action', function ($query) {
                $a = '';
                if (auth()->user()->can($this->route . '.edit')) {
                    $a = '<a href="' . route($this->route . '.edit', $query->id) . '" class="btn btn-outline-info btn-sm" title="Edit"><i class="ri-edit-box-line"></i></a> ';
                }
                if (auth()->user()->can($this->route . '.destroy')) {
                    $a .= '<button type="button" class="btn btn-outline-danger btn-sm" onclick="confirmDelete(' . $query->id . ', \'' . $this->type . '\')" data-toggle="tooltip" data-placement="top" title="Delete ' . $this->type . ' ??"><i class="ri-delete-bin-2-fill"></i></button> ';
                }
                return $a;
            })
            ->rawColumns(['action'])
            ->setRowId('id');
    }

    /**
     * Get the query source of dataTable.
     */
    public function query(LikelihoodImpactVulnerability $model): QueryBuilder
    {
        return $model->newQuery()->where('type', $this->type);
    }

    /**
     * Optional method if you want to use the html builder.
     */
    public function html(): HtmlBuilder
    {
        if (auth()->user()->can($this->route . '.create')) {
            $buttons[] = Button::make('add');
        }
        $buttons[] = [
            Button::make('excel'),
            Button::make('csv'),
            Button::make('print'),
            Button::make('reset'),
            Button::make('reload'),
        ];
        return $this->builder()
            ->setTableId($this->type . '-DataTable')
            ->columns($this->getColumns())
            ->orderBy(0, 'asc')
            ->buttons($buttons);
    }

    /**
     * Get the dataTable columns definition.
     */
    public function getColumns(): array
    {
        return [
            Column::make('score')->title(trans('admin_fields.score')),
            Column::make('name')->title(trans('admin_fields.name')),
            Column::make('definition')->title(trans('admin_fields.definition')),
            Column::computed('action')
                ->title(trans('admin_fields.action'))
                ->exportable(false)
                ->printable(false)
                ->addClass('text-center'),
        ];
    }

    /**
     * Get the filename for export.
     */
    protected function filename(): string
    {
        return $this->type . 's_' . date('YmdHis');
    }
}
