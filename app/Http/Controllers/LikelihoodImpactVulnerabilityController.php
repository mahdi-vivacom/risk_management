<?php

namespace App\Http\Controllers;

use App\DataTables\LikelihoodImpactVulnerabilitysDataTable;
use App\Models\LikelihoodImpactVulnerability;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

class LikelihoodImpactVulnerabilityController extends Controller
{
    protected $index;
    protected $route;
    protected $type;

    public function __construct()
    {
        $routeName = Route::currentRouteName();

        if (strpos($routeName, 'likelihoods') !== false) {
            $this->index = 'likelihood';
            $this->route = 'likelihoods';
            $this->type = 'Likelihood';
        } elseif (strpos($routeName, 'impacts') !== false) {
            $this->index = 'impact';
            $this->route = 'impacts';
            $this->type = 'Impact';
        } elseif (strpos($routeName, 'vulnerabilities') !== false) {
            $this->index = 'vulnerability';
            $this->route = 'vulnerabilities';
            $this->type = 'Vulnerability';
        }
    }
    /**
     * Display a listing of the resource.
     */
    public function index(LikelihoodImpactVulnerabilitysDataTable $dataTable)
    {
        $data = [
            'title' => $this->type . ' List',
        ];
        return $dataTable->render('backend.likelihood.index', $data);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $data = [
            'title' => 'Create ' . $this->type,
            'route' => $this->route,
            'type' => $this->type,
        ];
        return view('backend.likelihood.create', $data);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'type' => 'required|in:' . implode(',', LikelihoodImpactVulnerability::getTypeOptions()),
            'name' => 'required|string|max:255',
            'score' => 'required|numeric',
            'definition' => 'required|string',
        ], [
            'name.required' => $this->type . ' field is required.',
        ]);

        $model = new LikelihoodImpactVulnerability();
        $model->fill($validatedData);
        $model->save();

        return redirect()->route($this->route . '.index')->with('success', $this->type . ' ' . trans('admin_fields.data_store_message'));
    }

    /**
     * Display the specified resource.
     */
    public function show($id)
    {
        return LikelihoodImpactVulnerability::find($id);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id)
    {
        $info = LikelihoodImpactVulnerability::find($id);
        $data = [
            'title' => 'Edit ' . $this->type,
            'info' => $info,
            'route' => $this->route,
            'type' => $this->type,
        ];
        return view('backend.likelihood.edit', $data);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'type' => 'required|in:' . implode(',', LikelihoodImpactVulnerability::getTypeOptions()),
            'name' => 'required|string|max:255',
            'score' => 'required|numeric',
            'definition' => 'required|string',
        ], [
            'name.required' => $this->type . ' field is required.',
        ]);
        $data = LikelihoodImpactVulnerability::find($id);

        $data->update($validatedData);

        return redirect()->route($this->route . '.index')->with('success', $this->type . ' ' . trans('admin_fields.data_update_message'));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy($id)
    {
        $data = LikelihoodImpactVulnerability::find($id);
        $data->delete();

        if (request()->ajax()) {
            return response()->json([
                'type' => 'success',
                'message' => $this->type . ' ' . trans('admin_fields.data_delete_message'),
            ]);
        }
        return redirect()->route($this->route . '.index')->with('success', $this->type . ' ' . trans('admin_fields.data_delete_message'));
    }
}
